// Code generated by protoc-gen-gogo.
// source: test.proto
// DO NOT EDIT!

/*
Package gogotest is a generated protocol buffer package.

It is generated from these files:
	test.proto

It has these top-level messages:
	Subject
	Person
	Application
*/
package gogotest

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Subject struct {
	Label   string           `protobuf:"bytes,3,opt,name=label,proto3" json:"label,omitempty"`
	Contact *Subject_Contact `protobuf:"bytes,4,opt,name=contact" json:"contact,omitempty"`
	// Types that are valid to be assigned to Entity:
	//	*Subject_Person
	//	*Subject_Application
	Entity isSubject_Entity `protobuf_oneof:"entity"`
}

func (m *Subject) Reset()                    { *m = Subject{} }
func (m *Subject) String() string            { return proto.CompactTextString(m) }
func (*Subject) ProtoMessage()               {}
func (*Subject) Descriptor() ([]byte, []int) { return fileDescriptorTest, []int{0} }

type isSubject_Entity interface {
	isSubject_Entity()
}

type Subject_Person struct {
	Person *Person `protobuf:"bytes,8,opt,name=person,oneof"`
}
type Subject_Application struct {
	Application *Application `protobuf:"bytes,9,opt,name=application,oneof"`
}

func (*Subject_Person) isSubject_Entity()      {}
func (*Subject_Application) isSubject_Entity() {}

func (m *Subject) GetEntity() isSubject_Entity {
	if m != nil {
		return m.Entity
	}
	return nil
}

func (m *Subject) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *Subject) GetContact() *Subject_Contact {
	if m != nil {
		return m.Contact
	}
	return nil
}

func (m *Subject) GetPerson() *Person {
	if x, ok := m.GetEntity().(*Subject_Person); ok {
		return x.Person
	}
	return nil
}

func (m *Subject) GetApplication() *Application {
	if x, ok := m.GetEntity().(*Subject_Application); ok {
		return x.Application
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Subject) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Subject_OneofMarshaler, _Subject_OneofUnmarshaler, _Subject_OneofSizer, []interface{}{
		(*Subject_Person)(nil),
		(*Subject_Application)(nil),
	}
}

func _Subject_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Subject)
	// entity
	switch x := m.Entity.(type) {
	case *Subject_Person:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Person); err != nil {
			return err
		}
	case *Subject_Application:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Application); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Subject.Entity has unexpected type %T", x)
	}
	return nil
}

func _Subject_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Subject)
	switch tag {
	case 8: // entity.person
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Person)
		err := b.DecodeMessage(msg)
		m.Entity = &Subject_Person{msg}
		return true, err
	case 9: // entity.application
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Application)
		err := b.DecodeMessage(msg)
		m.Entity = &Subject_Application{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Subject_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Subject)
	// entity
	switch x := m.Entity.(type) {
	case *Subject_Person:
		s := proto.Size(x.Person)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Subject_Application:
		s := proto.Size(x.Application)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Subject_Contact struct {
	Email       string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	PhoneNumber string `protobuf:"bytes,2,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
}

func (m *Subject_Contact) Reset()                    { *m = Subject_Contact{} }
func (m *Subject_Contact) String() string            { return proto.CompactTextString(m) }
func (*Subject_Contact) ProtoMessage()               {}
func (*Subject_Contact) Descriptor() ([]byte, []int) { return fileDescriptorTest, []int{0, 0} }

func (m *Subject_Contact) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *Subject_Contact) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

type Person struct {
	Name *Person_Name `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *Person) Reset()                    { *m = Person{} }
func (m *Person) String() string            { return proto.CompactTextString(m) }
func (*Person) ProtoMessage()               {}
func (*Person) Descriptor() ([]byte, []int) { return fileDescriptorTest, []int{1} }

func (m *Person) GetName() *Person_Name {
	if m != nil {
		return m.Name
	}
	return nil
}

type Person_Name struct {
	First     string `protobuf:"bytes,1,opt,name=first,proto3" json:"first,omitempty"`
	Last      string `protobuf:"bytes,2,opt,name=last,proto3" json:"last,omitempty"`
	Middle    string `protobuf:"bytes,3,opt,name=middle,proto3" json:"middle,omitempty"`
	Title     string `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	Suffix    string `protobuf:"bytes,5,opt,name=suffix,proto3" json:"suffix,omitempty"`
	Preffered string `protobuf:"bytes,6,opt,name=preffered,proto3" json:"preffered,omitempty"`
}

func (m *Person_Name) Reset()                    { *m = Person_Name{} }
func (m *Person_Name) String() string            { return proto.CompactTextString(m) }
func (*Person_Name) ProtoMessage()               {}
func (*Person_Name) Descriptor() ([]byte, []int) { return fileDescriptorTest, []int{1, 0} }

func (m *Person_Name) GetFirst() string {
	if m != nil {
		return m.First
	}
	return ""
}

func (m *Person_Name) GetLast() string {
	if m != nil {
		return m.Last
	}
	return ""
}

func (m *Person_Name) GetMiddle() string {
	if m != nil {
		return m.Middle
	}
	return ""
}

func (m *Person_Name) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Person_Name) GetSuffix() string {
	if m != nil {
		return m.Suffix
	}
	return ""
}

func (m *Person_Name) GetPreffered() string {
	if m != nil {
		return m.Preffered
	}
	return ""
}

type Application struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Url  string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (m *Application) Reset()                    { *m = Application{} }
func (m *Application) String() string            { return proto.CompactTextString(m) }
func (*Application) ProtoMessage()               {}
func (*Application) Descriptor() ([]byte, []int) { return fileDescriptorTest, []int{2} }

func (m *Application) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Application) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func init() {
	proto.RegisterType((*Subject)(nil), "gogotest.Subject")
	proto.RegisterType((*Subject_Contact)(nil), "gogotest.Subject.Contact")
	proto.RegisterType((*Person)(nil), "gogotest.Person")
	proto.RegisterType((*Person_Name)(nil), "gogotest.Person.Name")
	proto.RegisterType((*Application)(nil), "gogotest.Application")
}

func init() { proto.RegisterFile("test.proto", fileDescriptorTest) }

var fileDescriptorTest = []byte{
	// 337 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x54, 0x92, 0xb1, 0x4e, 0xc3, 0x30,
	0x10, 0x86, 0x9b, 0x36, 0x4d, 0x9b, 0x0b, 0x43, 0x65, 0x01, 0x32, 0x15, 0x43, 0xe9, 0x54, 0x18,
	0x32, 0xd0, 0x89, 0x91, 0xb2, 0x74, 0xaa, 0x50, 0x78, 0x00, 0xe4, 0xa4, 0x97, 0x62, 0xe4, 0xc4,
	0x51, 0xe2, 0x48, 0xf0, 0x08, 0xec, 0x3c, 0x15, 0x4f, 0x85, 0x7c, 0x4e, 0x49, 0xd9, 0xfc, 0xdf,
	0xff, 0xff, 0xf6, 0x97, 0x53, 0x00, 0x0c, 0x36, 0x26, 0xae, 0x6a, 0x6d, 0x34, 0x9b, 0x1e, 0xf4,
	0x41, 0x5b, 0xbd, 0xfc, 0x1a, 0xc2, 0xe4, 0xa5, 0x4d, 0xdf, 0x31, 0x33, 0xec, 0x1c, 0xc6, 0x4a,
	0xa4, 0xa8, 0xf8, 0x68, 0xe1, 0xad, 0xc2, 0xc4, 0x09, 0xb6, 0x86, 0x49, 0xa6, 0x4b, 0x23, 0x32,
	0xc3, 0xfd, 0x85, 0xb7, 0x8a, 0xee, 0xaf, 0xe2, 0x63, 0x3b, 0xee, 0x9a, 0xf1, 0x93, 0x0b, 0x24,
	0xc7, 0x24, 0xbb, 0x83, 0xa0, 0xc2, 0xba, 0xd1, 0x25, 0x9f, 0x52, 0x67, 0xd6, 0x77, 0x9e, 0x69,
	0xbe, 0x1d, 0x24, 0x5d, 0x82, 0x3d, 0x40, 0x24, 0xaa, 0x4a, 0xc9, 0x4c, 0x18, 0xa9, 0x4b, 0x1e,
	0x52, 0xe1, 0xa2, 0x2f, 0x3c, 0xf6, 0xe6, 0x76, 0x90, 0x9c, 0x66, 0xe7, 0x1b, 0x98, 0x74, 0x4f,
	0x5b, 0x78, 0x2c, 0x84, 0x54, 0xdc, 0x73, 0xf0, 0x24, 0xd8, 0x0d, 0x9c, 0x55, 0x6f, 0xba, 0xc4,
	0xd7, 0xb2, 0x2d, 0x52, 0xac, 0xf9, 0x90, 0xcc, 0x88, 0x66, 0x3b, 0x1a, 0x6d, 0xa6, 0x10, 0x60,
	0x69, 0xa4, 0xf9, 0x5c, 0xfe, 0x78, 0x10, 0x38, 0x3a, 0x76, 0x0b, 0x7e, 0x29, 0x0a, 0xa4, 0xcb,
	0xfe, 0xc1, 0x38, 0x3f, 0xde, 0x89, 0x02, 0x13, 0x8a, 0xcc, 0xbf, 0x3d, 0xf0, 0xad, 0xb4, 0x04,
	0xb9, 0xac, 0x1b, 0x73, 0x24, 0x20, 0xc1, 0x18, 0xf8, 0x4a, 0x34, 0xa6, 0x7b, 0x99, 0xce, 0xec,
	0x12, 0x82, 0x42, 0xee, 0xf7, 0x0a, 0xbb, 0x4d, 0x77, 0xca, 0xde, 0x60, 0xa4, 0x51, 0x48, 0x8b,
	0x0e, 0x13, 0x27, 0x6c, 0xba, 0x69, 0xf3, 0x5c, 0x7e, 0xf0, 0xb1, 0x4b, 0x3b, 0xc5, 0xae, 0x21,
	0xac, 0x6a, 0xcc, 0x73, 0xac, 0x71, 0xcf, 0x03, 0xb2, 0xfa, 0xc1, 0x72, 0x0d, 0xd1, 0xc9, 0xe2,
	0x2c, 0xc6, 0xdf, 0x07, 0x85, 0x8e, 0x9c, 0xcd, 0x60, 0xd4, 0xd6, 0xaa, 0x23, 0xb3, 0xc7, 0x34,
	0xa0, 0xdf, 0x63, 0xfd, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x7a, 0x2d, 0x5d, 0x22, 0x2c, 0x02, 0x00,
	0x00,
}
